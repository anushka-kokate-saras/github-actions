name: Deploy Multiple Lambda Functions

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env: 
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: "ap-northeast-3"

    steps:
      - uses: actions/checkout@v2

      - name: Install zip tool
        run: sudo apt-get install -y zip

      - name: Install or Update AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      - name: Deploy Lambda Functions
        run: |
            MAX_RETRIES=5
            RETRY_DELAY=10

            for dir in ./lambdaFunctions/*/; do
              CONFIG_FILE="${dir}config.json"

              # Read configuration variables
              FUNCTION_NAME=$(jq -r '.functionName' "$CONFIG_FILE")
              RUNTIME=$(jq -r '.runtime' "$CONFIG_FILE")
              TIMEOUT=$(jq -r '.timeout' "$CONFIG_FILE")
              MEMORY_SIZE=$(jq -r '.memorySize' "$CONFIG_FILE")
              ENV_VARS=$(jq -r '.environmentVariables | to_entries | map("\(.key)=\(.value)") | join(",")' "$CONFIG_FILE")
              SQS_ENABLED=$(jq -r '.sqsTrigger.enabled' "$CONFIG_FILE")

              echo "Deploying $FUNCTION_NAME"

              # Create ZIP file
              zip -r "${FUNCTION_NAME}.zip" "${dir}"
              sleep 5

              # Retry logic for updating function code
              attempt=0
              while [ $attempt -lt $MAX_RETRIES ]; do
                aws lambda update-function-code \
                  --function-name "$FUNCTION_NAME" \
                  --zip-file "fileb://${FUNCTION_NAME}.zip"
                
                if [ $? -eq 0 ]; then
                  echo "Successfully updated function code for $FUNCTION_NAME"
                  break
                fi

                attempt=$((attempt + 1))
                echo "Update failed, retrying... ($attempt/$MAX_RETRIES)"
                sleep $RETRY_DELAY
              done
              sleep 5

              # Retry logic for updating function configuration
              attempt=0
              while [ $attempt -lt $MAX_RETRIES ]; do
                if [ -n "$ENV_VARS" ]; then
                  aws lambda update-function-configuration \
                    --function-name "$FUNCTION_NAME" \
                    --runtime "$RUNTIME" \
                    --timeout "$TIMEOUT" \
                    --memory-size "$MEMORY_SIZE" \
                    --environment "Variables={$ENV_VARS}"
                else
                  aws lambda update-function-configuration \
                    --function-name "$FUNCTION_NAME" \
                    --runtime "$RUNTIME" \
                    --timeout "$TIMEOUT" \
                    --memory-size "$MEMORY_SIZE"
                fi

                if [ $? -eq 0 ]; then
                  echo "Successfully updated function configuration for $FUNCTION_NAME"
                  break
                fi

                attempt=$((attempt + 1))
                echo "Update failed, retrying... ($attempt/$MAX_RETRIES)"
                sleep $RETRY_DELAY
              done
              sleep 5

              # Add SQS Trigger if enabled
              if [ "$SQS_ENABLED" = "true" ]; then
                EVENT_SOURCE_ARN=$(jq -r '.sqsTrigger.eventSourceArn' "$CONFIG_FILE")
                BATCH_SIZE=$(jq -r '.sqsTrigger.batchSize' "$CONFIG_FILE")

                aws lambda create-event-source-mapping \
                  --function-name "$FUNCTION_NAME" \
                  --batch-size "$BATCH_SIZE" \
                  --event-source-arn "$EVENT_SOURCE_ARN"
              fi
            done
